---
interface Props {
  title: string;
  cta?: string;
  page?: "contact" | "services";
  link?: URL;
  image: string;
  large?: boolean;
  umamiEvent?: string;
}

const { title, cta, page, link, image = await Astro.slots.render("image"), large, umamiEvent } = Astro.props;

const largeClasses = large ? "md:col-span-2" : null;
const baseURL = new URL(Astro.url.pathname, Astro.site);

const imageUrl = baseURL + "image/" + image;
---

<a
  href={link ? `${link}` : `/${page}`}
  target={link ? "_blank" : "_self"}
  style={`background-image:url("${imageUrl}")`}
  class={`group relative col-span-1 mx-auto flex w-full items-end justify-start border-8 border-black/30 bg-cover bg-clip-padding bg-center py-24 transition hover:border-black/40 ${largeClasses}`}
  data-umami-event={umamiEvent ? umamiEvent : null}
>
  <div class="absolute inset-0 h-full w-full bg-black/40 backdrop-blur-sm transition group-hover:bg-black/10 group-hover:backdrop-blur-[3px]"></div>
  <div class="z-10 flex flex-col items-start justify-center bg-yellow-600/70 px-4 py-6 text-black transition-all group-hover:bg-yellow-600 xl:px-6 xl:py-8">
    <h2 class="pr-10 font-walkway text-3xl tracking-wider transition-all group-hover:tracking-[0.08em] lg:text-5xl">{title}</h2>
    {
      cta && (
        <h2 class="hover font-walkway mt-3 w-5/6 bg-black p-2 text-base tracking-wider text-white transition-all group-hover:w-full group-hover:bg-orange-950 md:text-xl lg:mt-6 lg:text-3xl">{cta}</h2>
      )
    }
  </div>
</a>
